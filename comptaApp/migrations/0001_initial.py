# Generated by Django 2.0.2 on 2018-04-18 01:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Compte',
            fields=[
                ('compteid', models.AutoField(primary_key=True, serialize=False)),
                ('libelle', models.CharField(blank=True, max_length=45, null=True)),
                ('classe', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compte',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Contrat',
            fields=[
                ('users_userid', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'contrat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Credits',
            fields=[
                ('creditsid', models.AutoField(primary_key=True, serialize=False)),
                ('operation_operationid', models.IntegerField()),
                ('compte_compteid', models.IntegerField()),
                ('operation_typejournal_typejournalid', models.IntegerField()),
                ('operation_piece_pieceid', models.IntegerField()),
                ('operation_piece_typepiece_typepieceid', models.IntegerField()),
                ('operation_travailleur_users_userid', models.IntegerField()),
                ('operation_travailleur_travailleuridsaisie', models.IntegerField()),
                ('operation_travailleur_travailleuridimpute', models.IntegerField()),
                ('montant', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'credits',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Debits',
            fields=[
                ('debitsid', models.AutoField(primary_key=True, serialize=False)),
                ('operation_operationid', models.IntegerField()),
                ('compte_compteid', models.IntegerField()),
                ('operation_typejournal_typejournalid', models.IntegerField()),
                ('operation_piece_pieceid', models.IntegerField()),
                ('operation_piece_typepiece_typepieceid', models.IntegerField()),
                ('operation_travailleur_users_userid', models.IntegerField()),
                ('operation_travailleur_travailleuridsaisie', models.IntegerField()),
                ('operation_travailleur_travailleuridimpute', models.IntegerField()),
                ('montant', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'debits',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dfe',
            fields=[
                ('users_userid', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'dfe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dsv',
            fields=[
                ('users_userid', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'dsv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('operationid', models.AutoField(primary_key=True, serialize=False)),
                ('typejournal_typejournalid', models.IntegerField()),
                ('piece_pieceid', models.IntegerField()),
                ('piece_typepiece_typepieceid', models.IntegerField()),
                ('travailleur_users_userid', models.IntegerField()),
                ('travailleur_travailleuridsaisie', models.IntegerField()),
                ('travailleur_travailleuridimpute', models.IntegerField()),
                ('libelle', models.CharField(blank=True, max_length=45, null=True)),
                ('montant', models.FloatField(blank=True, null=True)),
                ('dateoperation', models.DateField(blank=True, null=True)),
                ('datesaisie', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'operation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Piece',
            fields=[
                ('pieceid', models.AutoField(primary_key=True, serialize=False)),
                ('typepiece_typepieceid', models.IntegerField()),
                ('code', models.CharField(blank=True, max_length=20, null=True)),
                ('lien', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'piece',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Statut',
            fields=[
                ('users_userid', models.IntegerField(primary_key=True, serialize=False)),
                ('denomination', models.CharField(max_length=45)),
                ('siege', models.CharField(blank=True, max_length=45, null=True)),
                ('objet', models.CharField(blank=True, max_length=45, null=True)),
                ('capital', models.FloatField(blank=True, null=True)),
                ('duree', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'statut',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Travailleur',
            fields=[
                ('travailleurid', models.AutoField(primary_key=True, serialize=False)),
                ('users_userid', models.IntegerField()),
                ('nom', models.CharField(blank=True, max_length=20, null=True)),
                ('prenom', models.CharField(blank=True, max_length=20, null=True)),
                ('fonction', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'travailleur',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Typejournal',
            fields=[
                ('typejournalid', models.AutoField(primary_key=True, serialize=False)),
                ('libelle', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'typejournal',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Typepiece',
            fields=[
                ('typepieceid', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'typepiece',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('userid', models.AutoField(primary_key=True, serialize=False)),
                ('denomination', models.CharField(blank=True, max_length=45, null=True)),
                ('siege', models.CharField(blank=True, max_length=45, null=True)),
                ('objet', models.CharField(blank=True, max_length=45, null=True)),
                ('capital', models.FloatField(blank=True, null=True)),
                ('duree', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('denominations', models.CharField(blank=True, max_length=45, null=True)),
                ('sieges', models.CharField(blank=True, max_length=45, null=True)),
                ('objets', models.CharField(blank=True, max_length=45, null=True)),
                ('capitals', models.FloatField(blank=True, null=True)),
                ('durees', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
